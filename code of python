#ID3分类算法
from math import log
import operator

#创建数据集.
#list[0]代表不浮出水面是否可以生存，list[1],代表是否有脚蹼，list[2]代表是否是鱼类
#结果集【0】不是鱼类，结果集【1】是鱼类
def creatDataSet():
    dataSet = [["1","1","yes"],["1","1","yes"],["1","0","no"],["0","1","no"],["0","0","no"]] 
    result = ['no surfacing', 'flippers']
    return dataSet,result

#计算信息熵
def calcShannonEnt(dataSet):
    numrow = len(dataSet)
    labelCount = {}#为所有分类目录创建词典
    for feature in dataSet:
        currentLabel = feature[-1]
        if currentLabel not in labelCount.keys():
            labelCount[currentLabel] = 0
        labelCount[currentLabel] += 1
    shannonEnt = 0.0 #计算信息熵（Entropy）
    for data in labelCount:
        p = float(labelCount[data])/numrow
        shannonEnt -= p*log(p,2)
    return shannonEnt

#定义按照某个特征进行划分的函数splitDataSet
#输入三个变量（待划分的数据集，特征，分类值）
def splitDataSet(dataSet,axis,value):
    retDataSet = []
    for feature in dataSet:
        if feature[axis] == value:
            redFeature = feature[:axis]
            redFeature.extend(feature[axis+1:])
            retDataSet.append(redFeature)
    return retDataSet

#定义按照最大信息增益划分数据的函数
def chooseBestFeatureToSplit(dataSet):
    numFeature = len(dataSet[0])-1
    shannonEnt = calcShannonEnt(dataSet)
    bestEnt = 0
    bestFeature = -1
    for i in range(numFeature):
        featureList = [number[i] for number in dataSet]
        uniqueList = set(featureList)#去除重复元素，相当于R语言的unique
        #print(uniqueList)
        newEnt = 0.0
        for value in uniqueList:
            splitList = splitDataSet(dataSet,i,value)
            p = len(splitList)/float(len(dataSet))
            newEnt += p* calcShannonEnt(splitList)
        inGain = shannonEnt - newEnt
        print("第",i,"属性:",inGain)
        if inGain > bestEnt:
            bestEnt = inGain
            bestFeature = i
    #print("index:",bestFeature)
    return bestFeature

#返回类标号最多的属性
def sortCnt(classList):
    classCount = {}
    for vote in classList:
        if vote not in classCount.keys() : classCount[vote] = 0
        classCount[vote] += 1
    #print(classCount)
    #sorted 对列表或者字典进行排序，key指定要排序的参数，operator.itemgetter则是选出列表或者字典中指定位置的元素，reverse排序后的次序，默认为升序，True则为降序
    sortedClass = sorted(classCount,key= operator.itemgetter(1),reverse=True)
    #print(sortedClass)
    return sortedClass[0][0]

#递归创建决策树
def creatTree(dataSet,result):
    classList = [number[-1] for number in dataSet]
    #类别相同，停止划分
    if classList.count(classList[-1]) == len(classList):
        return classList[-1]
    #长度为1，返回出现次数最多的类别
    if len(classList[0]) == 1:
        return sortCnt(classList)
    labels = result[:]
    bestFeature = chooseBestFeatureToSplit(dataSet)#按照信息增益最高选取分类特征属性
    bestFeatureLabel = labels[bestFeature]#把信息增益最高分类特征属性的标签提取出来
    myTree = {bestFeatureLabel:{}}#创建树字典
    del(labels[bestFeature])
    feature = [example[bestFeature] for example in dataSet]
    uniqueValue = set(feature)
    #print("unique:",uniqueValue)
    #print("index:",bestFeature)
    for value in uniqueValue:
        newLabel = labels[:]#创建子标签
        myTree[bestFeatureLabel][value] = creatTree(splitDataSet(dataSet,bestFeature,value),newLabel)
    return myTree

#在创建好决策树后，输入数据进行测试
def dicision(tree,labels,value):
    #print(list(tree.keys()))
    firstFeature = list(tree.keys())[0]#获取决策树第一个属性
    subTree = tree[firstFeature]
    featureIndex = labels.index(firstFeature)
    for temp in subTree.keys():
        if temp == value[featureIndex]:
            if  type(subTree[temp]).__name__=='dict':
                classfly = dicision(subTree[temp],labels,value)
            else : classfly = subTree[temp]
    return classfly

#用文件存储决策树
def storeTree(inputTree,filename):
    import pickle
    fw=open(filename,'wb') #pickle默认方式是二进制，需要制定'wb'
    pickle.dump(inputTree,fw)
    fw.close()
    
#读取决策树
def grabTree(filename):
    import pickle
    fr=open(filename,'rb')#需要制定'rb'，以byte形式读取
    return pickle.load(fr)

#西瓜数据集
def waterData():
    import csv
    csv_reader = csv.reader(open("C:\\Users\\ljn\\Desktop\\data mining\\dicision tree\\id3\\watermelon.csv"))
    data = []
    i = 0
    for row in csv_reader:
        if(i>0): 
            data.append(row)
        i += 1
    print(data)
    label = ["色泽","根蒂","敲声","纹理","脐部","触感","密度","含糖率"]
    return data,label

mydata,result = waterData()
#splitDataSet(mydata,0,"0")
mytree = creatTree(mydata,result)
print(mytree)
#dicision(mytree,result,["0","0"])
